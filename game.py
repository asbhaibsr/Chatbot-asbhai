# --- IMPORTANT: THIS CODE IS PROPERTY OF @asbhaibsr ---
# --- Unauthorized copying or distribution is prohibited ---
# Owner Telegram ID: @asbhaibsr
# Update Channel: @asbhai_bsr
# Support Group: @aschat_group

import asyncio
from pyrogram import filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from pyrogram.client import Client

# ‡§ó‡•á‡§Æ‡•ç‡§∏ ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏
games_db = {
    "yesno_game": {
        "name": "ü§î ‡§π‡§æ‡§Å ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç?",
        "rules": "1. ‡§™‡§π‡§≤‡§æ ‡§Ø‡•Ç‡§ú‡§∞ ‡§∏‡§µ‡§æ‡§≤ ‡§™‡•Ç‡§õ‡•á‡§ó‡§æ\n2. ‡§¶‡•Ç‡§∏‡§∞‡§æ ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§ó‡§æ\n3. ‡§§‡•Ä‡§∏‡§∞‡§æ ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§® ‡§≤‡§ó‡§æ‡§è‡§ó‡§æ",
        "min_players": 3,
        "players": [],
        "countdown": None,
        "active": False,
        "current_question": None,
        "current_answer": None,
        "current_guesser": None
    },
    "future_game2": {
        "name": "üé≠ ‡§°‡•ç‡§∞‡§æ‡§Æ‡§æ ‡§ï‡•ç‡§µ‡•Ä‡§® (‡§ú‡§≤‡•ç‡§¶ ‡§Ü ‡§∞‡§π‡§æ)",
        "rules": "COMING SOON",
        "min_players": 3,
        "players": [],
        "countdown": None
    }
}

async def start_countdown(game_id, chat_id, client):
    game = games_db[game_id]
    
    for time_left in [60, 30, 10]:
        if time_left == 60:
            text = f"‚è≥ ‡§ó‡•á‡§Æ ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã‡§®‡•á ‡§Æ‡•á‡§Ç 1 ‡§Æ‡§ø‡§®‡§ü...\n‡§ú‡•Å‡§°‡§º‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è:\n/startgame"
        elif time_left == 30:
            text = f"‚è≥ ‡§ï‡•á‡§µ‡§≤ 30 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§∂‡•á‡§∑!\n‡§ú‡§≤‡•ç‡§¶‡•Ä ‡§ú‡•â‡§á‡§® ‡§ï‡§∞‡•ã!"
        else:
            text = "‚è≥ ‡§Ü‡§ñ‡§ø‡§∞‡•Ä 10 ‡§∏‡•á‡§ï‡§Ç‡§°! ‡§ú‡§≤‡•ç‡§¶‡•Ä ‡§ï‡§∞‡•ã!"
        
        await client.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üéÆ ‡§Ö‡§≠‡•Ä ‡§ú‡•â‡§á‡§® ‡§ï‡§∞‡•ã", callback_data=f"join_{game_id}")]
            ])
        )
        await asyncio.sleep(30 if time_left != 10 else 10)
    
    await start_yesno_game(game_id, chat_id, client)

async def start_yesno_game(game_id, chat_id, client):
    game = games_db[game_id]
    players = game["players"]
    
    if len(players) < game["min_players"]:
        await client.send_message(
            chat_id=chat_id,
            text="üò¢ ‡§™‡§∞‡•ç‡§Ø‡§æ‡§™‡•ç‡§§ ‡§ñ‡§ø‡§≤‡§æ‡§°‡§º‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç‡•§ ‡§ó‡•á‡§Æ ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à‡•§"
        )
        game["players"] = []
        game["countdown"] = None
        return
    
    game["active"] = True
    
    # ‡§™‡§π‡§≤‡§æ ‡§Ø‡•Ç‡§ú‡§∞ ‡§∏‡§µ‡§æ‡§≤ ‡§™‡•Ç‡§õ‡•á
    questioner = players[0]
    await client.send_message(
        chat_id=questioner["id"],
        text=f"üé§ {questioner['name']}, ‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï '‡§π‡§æ‡§Å/‡§®‡§π‡•Ä‡§Ç' ‡§µ‡§æ‡§≤‡§æ ‡§∏‡§µ‡§æ‡§≤ ‡§™‡•Ç‡§õ‡•ã:"
    )
    game["current_question"] = None
    game["current_answer"] = None
    game["current_guesser"] = players[2]["id"] if len(players) > 2 else None
    
    # ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡•ã ‡§∏‡•Ç‡§ö‡§®‡§æ
    await client.send_message(
        chat_id=chat_id,
        text=f"üéÆ ‡§ó‡•á‡§Æ ‡§∂‡•Å‡§∞‡•Ç! {questioner['name']} ‡§∏‡•á ‡§è‡§ï ‡§∏‡§µ‡§æ‡§≤ ‡§ï‡§æ ‡§á‡§Ç‡§§‡§ú‡§º‡§æ‡§∞ ‡§π‡•à..."
    )

async def handle_yesno_answer(client, user_id, answer):
    for game_id, game in games_db.items():
        if game.get("active") and game.get("current_answer") is None:
            # Check if this user is the answerer
            if len(game["players"]) > 1 and game["players"][1]["id"] == user_id:
                game["current_answer"] = answer
                await client.send_message(
                    chat_id=user_id,
                    text=f"‡§Ü‡§™‡§®‡•á {answer} ‡§ö‡•Å‡§®‡§æ! ‡§Ö‡§¨ ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§á‡§Ç‡§§‡§ú‡§º‡§æ‡§∞ ‡§π‡•à..."
                )
                
                # Notify group
                guesser_name = next((p["name"] for p in game["players"] if p["id"] == game["current_guesser"]), "‡§ï‡•ã‡§à")
                await client.send_message(
                    chat_id=game["players"][0]["id"],  # Questioner's chat
                    text=f"{guesser_name} ‡§Ö‡§¨ ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§® ‡§≤‡§ó‡§æ‡§è‡§ó‡§æ ‡§ï‡§ø ‡§ú‡§µ‡§æ‡§¨ ‡§ï‡•ç‡§Ø‡§æ ‡§•‡§æ!"
                )
                return True
    return False

async def handle_yesno_guess(client, user_id, guess):
    for game_id, game in games_db.items():
        if game.get("active") and game.get("current_guesser") == user_id:
            correct = (guess.lower() == game["current_answer"].lower())
            
            # ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡•ã ‡§∞‡§ø‡§ú‡§≤‡•ç‡§ü ‡§¨‡§§‡§æ‡§è‡§Ç
            result_text = (
                f"üéâ ‡§®‡§§‡•Ä‡§ú‡§æ!\n\n"
                f"‡§∏‡§µ‡§æ‡§≤: {game['current_question']}\n"
                f"‡§ú‡§µ‡§æ‡§¨: {game['current_answer']}\n"
                f"‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®: {guess}\n\n"
                f"{'‚úÖ ‡§∏‡§π‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®!' if correct else '‚ùå ‡§ó‡§≤‡§§ ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®!'}"
            )
            
            await client.send_message(
                chat_id=game["players"][0]["id"],  # Questioner's chat
                text=result_text
            )
            
            # ‡§∞‡•Ä‡§∏‡•á‡§ü ‡§ó‡•á‡§Æ
            game["players"] = []
            game["countdown"] = None
            game["active"] = False
            game["current_question"] = None
            game["current_answer"] = None
            game["current_guesser"] = None
            return True
    return False

# /startgame ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§π‡•à‡§Ç‡§°‡§≤‡§∞
@Client.on_message(filters.command("startgame") & (filters.group | filters.private))
async def start_game_command(client: Client, message: Message):
    if message.chat.type == "private":
        await message.reply_text("üö´ ‡§Ø‡§π ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§ó‡•ç‡§∞‡•Å‡§™‡•ç‡§∏ ‡§Æ‡•á‡§Ç ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à!")
        return

    buttons = []
    for game_id, game in games_db.items():
        btn_text = f"{game['name']}"
        buttons.append([InlineKeyboardButton(btn_text, callback_data=f"join_{game_id}")])
    
    await message.reply_text(
        "üéÆ ‡§ö‡•Å‡§®‡•á‡§Ç ‡§ó‡•á‡§Æ:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

# ‡§ú‡•â‡§á‡§® ‡§ó‡•á‡§Æ ‡§ï‡•â‡§≤‡§¨‡•à‡§ï ‡§π‡•à‡§Ç‡§°‡§≤‡§∞
@Client.on_callback_query(filters.regex("^join_"))
async def join_game_callback(client: Client, callback_query):
    query = callback_query
    game_id = query.data.replace("join_", "")
    game = games_db[game_id]
    
    if query.from_user.id in [p["id"] for p in game["players"]]:
        await query.answer("‡§Ü‡§™ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡•á ‡§π‡•à‡§Ç!")
        return
    
    game["players"].append({
        "id": query.from_user.id,
        "name": query.from_user.first_name
    })
    
    players_list = "\n".join([p["name"] for p in game["players"]])
    await query.message.reply_text(
        f"üéâ {query.from_user.first_name} ‡§ó‡•á‡§Æ ‡§Æ‡•á‡§Ç ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•ã ‡§ó‡§è!\n\n‡§ú‡•Å‡§°‡§º‡•á ‡§ñ‡§ø‡§≤‡§æ‡§°‡§º‡•Ä:\n{players_list}"
    )
    
    if len(game["players"]) >= game["min_players"] and not game["countdown"]:
        game["countdown"] = asyncio.create_task(start_countdown(game_id, query.message.chat.id, client))

# ‡§â‡§§‡•ç‡§§‡§∞ ‡§π‡•à‡§Ç‡§°‡§≤‡§∞
@Client.on_callback_query(filters.regex("^answer_"))
async def handle_answer(client: Client, callback_query):
    answer = callback_query.data.replace("answer_", "")
    await callback_query.answer(f"‡§Ü‡§™‡§®‡•á {answer} ‡§ö‡•Å‡§®‡§æ!")
    await handle_yesno_answer(client, callback_query.from_user.id, answer)
    await callback_query.message.edit_text(f"üß† ‡§Ü‡§™‡§ï‡§æ ‡§ú‡§µ‡§æ‡§¨: {answer}")

# ‡§Æ‡•à‡§∏‡•á‡§ú ‡§π‡•à‡§Ç‡§°‡§≤‡§∞ (‡§∏‡§µ‡§æ‡§≤ ‡§î‡§∞ ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§® ‡§ï‡•á ‡§≤‡§ø‡§è)
@Client.on_message(filters.group & filters.text & ~filters.command)
async def game_message_handler(client: Client, message: Message):
    for game_id, game in games_db.items():
        if game.get("active"):
            # ‡§∏‡§µ‡§æ‡§≤ ‡§™‡•Ç‡§õ‡§®‡•á ‡§µ‡§æ‡§≤‡§æ
            if len(game["players"]) > 0 and game["players"][0]["id"] == message.from_user.id and game["current_question"] is None:
                game["current_question"] = message.text
                await message.reply_text("‡§∏‡§µ‡§æ‡§≤ ‡§∏‡•á‡§µ ‡§π‡•ã ‡§ó‡§Ø‡§æ! ‡§Ö‡§¨ ‡§ú‡§µ‡§æ‡§¨‡§¶‡§æ‡§§‡§æ ‡§ï‡§æ ‡§á‡§Ç‡§§‡§ú‡§º‡§æ‡§∞...")
                
                # ‡§ú‡§µ‡§æ‡§¨‡§¶‡§æ‡§§‡§æ ‡§ï‡•ã ‡§¨‡§ü‡§® ‡§≠‡•á‡§ú‡•á‡§Ç
                if len(game["players"]) > 1:
                    answerer = game["players"][1]
                    await client.send_message(
                        chat_id=answerer["id"],
                        text=f"üß† {answerer['name']}, ‡§ï‡•É‡§™‡§Ø‡§æ ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§Ç:",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üëç ‡§π‡§æ‡§Å", callback_data="answer_yes")],
                            [InlineKeyboardButton("üëé ‡§®‡§π‡•Ä‡§Ç", callback_data="answer_no")]
                        ])
                    )
                return
            
            # ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§® ‡§≤‡§ó‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡§æ
            elif game["current_guesser"] == message.from_user.id and game["current_answer"] is not None:
                await handle_yesno_guess(client, message.from_user.id, message.text)
                return

# Add this to your existing callback handler if you have one
@app.on_callback_query()
async def callback_handler(client, callback_query):
    if callback_query.data.startswith("join_"):
        await join_game_callback(client, callback_query)
    elif callback_query.data.startswith("answer_"):
        await handle_answer(client, callback_query)
    # Add your other callback handlers here
