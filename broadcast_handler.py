# broadcast_handler.py (‡§®‡§Ø‡§æ ‡§î‡§∞ ‡§∏‡§π‡•Ä ‡§ï‡•ã‡§°)

import asyncio
import time
import datetime
from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.enums import ParseMode
from pyrogram.errors import FloodWait, UserIsBlocked, ChatWriteForbidden, PeerIdInvalid, RPCError

# 'config' ‡§î‡§∞ 'utils' ‡§∏‡•á ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§ö‡•Ä‡§ú‡§º‡•á‡§Ç ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
from config import (
    app, group_tracking_collection, user_tracking_collection,
    logger, OWNER_ID
)
from utils import (
    delete_after_delay_for_message,
    store_message 
)

# Broadcast Sending Logic (Helper Function) - ‡§Ø‡§π ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® ‡§ú‡•à‡§∏‡§æ ‡§•‡§æ ‡§µ‡•à‡§∏‡§æ ‡§π‡•Ä ‡§∞‡§π‡•á‡§ó‡§æ
async def send_broadcast_message(client: Client, chat_id: int, message: Message):
    """
    Given a chat ID and a message object (the message to broadcast), 
    sends the message and handles different content types.
    
    Returns: (True/False, reason_string)
    """
    try:
        await message.copy(chat_id, parse_mode=ParseMode.MARKDOWN)
        return (True, "Success")
    
    except UserIsBlocked:
        return (False, "Blocked")
    except ChatWriteForbidden:
        return (False, "Blocked") 
    except PeerIdInvalid:
        return (False, "Deleted/Invalid")
    except RPCError as rpc_e:
        error_msg = str(rpc_e)
        if "INPUT_USER_DEACTIVATED" in error_msg or "USER_DEACTIVATED" in error_msg:
             return (False, "Deleted/Deactivated") 
        logger.error(f"RPC Error sending broadcast to chat {chat_id}: {rpc_e}")
        return (False, "Error")
    
    except FloodWait as fw:
        logger.warning(f"FloodWait of {fw.value}s encountered. Sleeping...")
        await asyncio.sleep(fw.value)
        return await send_broadcast_message(client, chat_id, message) 
    except Exception as e:
        logger.error(f"General Error sending broadcast to chat {chat_id}: {e}")
        return (False, "Error")


# -----------------------------------------------------
# 1. PRIVATE CHAT BROADCAST (/broadcast) - ‡§®‡§Ø‡§æ ‡§§‡§∞‡•Ä‡§ï‡§æ
# -----------------------------------------------------

@app.on_message(filters.command("broadcast") & filters.private & filters.user(OWNER_ID))
async def pm_broadcast(client: Client, message: Message):
    if not message.reply_to_message:
        await message.reply_text(
            "**üöÄ Private Broadcast:** ‡§ï‡•É‡§™‡§Ø‡§æ ‡§â‡§∏ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§ï‡•ã **‡§∞‡§ø‡§™‡•ç‡§≤‡§æ‡§à** ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§ø‡§∏‡•á ‡§Ü‡§™ ‡§∏‡§≠‡•Ä ‡§Ø‡•Ç‡§ú‡§∞‡•ç‡§∏ ‡§ï‡•ã ‡§≠‡•á‡§ú‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§"
        )
        return

    b_msg = message.reply_to_message
    
    # Target IDs nikalna
    private_chat_ids = [u["_id"] for u in user_tracking_collection.find({})]
    all_target_ids = list(set(private_chat_ids))
    if OWNER_ID in all_target_ids: 
        all_target_ids.remove(OWNER_ID)

    total_targets = len(all_target_ids)
    
    if total_targets == 0:
        await message.reply_text("ü§∑‚Äç‚ôÄÔ∏è ‡§¨‡•ç‡§∞‡•â‡§°‡§ï‡§æ‡§∏‡•ç‡§ü ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ã‡§à ‡§Ø‡•Ç‡§ú‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§")
        return

    # Initial status message
    sts = await message.reply_text(f"üöÄ **Private Broadcast Shuru!**\n" 
                                   f"‡§Æ‡•à‡§Ç **{total_targets}** ‡§™‡•ç‡§∞‡§æ‡§á‡§µ‡•á‡§ü ‡§Ø‡•Ç‡§ú‡§∞‡•ç‡§∏ ‡§ï‡•ã ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú ‡§∞‡§π‡•Ä ‡§π‡•Ç‡§Å...", 
                                   parse_mode=ParseMode.MARKDOWN)

    start_time_broadcast = time.time()
    done, success, blocked, deleted, failed = 0, 0, 0, 0, 0
    
    logger.info(f"Starting PM broadcast to {total_targets} users.")

    for chat_id in all_target_ids:
        pti, sh = await send_broadcast_message(client, chat_id, b_msg)
        
        if pti:
            success += 1
        else:
            if sh == "Blocked": blocked += 1
            elif sh == "Deleted/Invalid" or sh == "Deleted/Deactivated": deleted += 1
            else: failed += 1
        done += 1
        
        if done % 20 == 0 or done == total_targets:
            try:
                await sts.edit_text(f"üöÄ **Broadcast Progress...**\n" 
                                    f"Total: **{total_targets}**\n" 
                                    f"Completed: **{done}**\n"
                                    f"Success: **{success}** ‚ú® | Blocked: **{blocked}** üíî | Deleted: **{deleted}** üóëÔ∏è",
                                    parse_mode=ParseMode.MARKDOWN)
            except Exception:
                pass
                
    time_taken = datetime.timedelta(seconds=int(time.time()-start_time_broadcast))
    final_message = (f"üéâ **Private Broadcast ‡§™‡•Ç‡§∞‡§æ ‡§π‡•Å‡§Ü!**\n" 
                     f"‡§∏‡§Æ‡§Ø ‡§≤‡§ó‡§æ: **{time_taken}**\n\n" 
                     f"Total Users: **{total_targets}**\n" 
                     f"‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§≠‡•á‡§ú‡§æ: **{success}** ‚ú®\n" 
                     f"Blocked: **{blocked}** üíî\n"
                     f"Deleted/Invalid: **{deleted}** üóëÔ∏è\n"
                     f"‡§Ö‡§®‡•ç‡§Ø Fehler: **{failed}** üò•")
    
    await sts.edit_text(final_message, parse_mode=ParseMode.MARKDOWN)
    await store_message(client, message)


# -----------------------------------------------------
# 2. GROUP BROADCAST (/grp_broadcast) - ‡§®‡§Ø‡§æ ‡§§‡§∞‡•Ä‡§ï‡§æ
# -----------------------------------------------------

@app.on_message(filters.command("grp_broadcast") & filters.private & filters.user(OWNER_ID))
async def broadcast_group(client: Client, message: Message):
    if not message.reply_to_message:
        await message.reply_text(
            "**üöÄ Group Broadcast:** ‡§ï‡•É‡§™‡§Ø‡§æ ‡§â‡§∏ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§ï‡•ã **‡§∞‡§ø‡§™‡•ç‡§≤‡§æ‡§à** ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§ø‡§∏‡•á ‡§Ü‡§™ ‡§∏‡§≠‡•Ä ‡§ó‡•ç‡§∞‡•Å‡§™‡•ç‡§∏ ‡§Æ‡•á‡§Ç ‡§≠‡•á‡§ú‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§"
        )
        return
        
    b_msg = message.reply_to_message
    
    # Target IDs nikalna (Sirf Groups)
    group_chat_ids = [g["_id"] for g in group_tracking_collection.find({})]
    total_targets = len(group_chat_ids)
    
    if total_targets == 0:
        await message.reply_text("ü§∑‚Äç‚ôÄÔ∏è ‡§¨‡•ç‡§∞‡•â‡§°‡§ï‡§æ‡§∏‡•ç‡§ü ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ã‡§à ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§")
        return

    sts = await message.reply_text(f"üöÄ **Group Broadcast Shuru!**\n" 
                                   f"‡§Æ‡•à‡§Ç **{total_targets}** ‡§ó‡•ç‡§∞‡•Å‡§™‡•ç‡§∏ ‡§Æ‡•á‡§Ç ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú ‡§∞‡§π‡•Ä ‡§π‡•Ç‡§Å...", 
                                   parse_mode=ParseMode.MARKDOWN)

    start_time_broadcast = time.time()
    done, success, failed = 0, 0, 0
    
    logger.info(f"Starting Group broadcast to {total_targets} groups.")

    for chat_id in group_chat_ids:
        pti, sh = await send_broadcast_message(client, chat_id, b_msg)
        
        if pti:
            success += 1
        else:
            failed += 1
        done += 1
        
        if done % 20 == 0 or done == total_targets:
            try:
                await sts.edit_text(f"üöÄ **Group Broadcast Progress...**\n" 
                                    f"Total Groups: **{total_targets}**\n" 
                                    f"Completed: **{done}**\n"
                                    f"Success: **{success}** ‚ú® | Failed: **{failed}** üíî",
                                    parse_mode=ParseMode.MARKDOWN)
            except Exception:
                pass
                
    time_taken = datetime.timedelta(seconds=int(time.time()-start_time_broadcast))
    final_message = (f"üéâ **Group Broadcast ‡§™‡•Ç‡§∞‡§æ ‡§π‡•Å‡§Ü!**\n" 
                     f"‡§∏‡§Æ‡§Ø ‡§≤‡§ó‡§æ: **{time_taken}**\n\n" 
                     f"Total Groups: **{total_targets}**\n" 
                     f"‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§≠‡•á‡§ú‡§æ: **{success}** ‚ú®\n" 
                     f"Failed: **{failed}** üíî")
    
    await sts.edit_text(final_message, parse_mode=ParseMode.MARKDOWN)
    await store_message(client, message)
