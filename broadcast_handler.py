# broadcast_handler.py (‡§®‡§Ø‡§æ ‡§î‡§∞ ‡§∏‡§π‡•Ä ‡§ï‡•ã‡§°)

import asyncio
import time
import datetime
from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.enums import ParseMode
from pyrogram.errors import FloodWait, UserIsBlocked, ChatWriteForbidden, PeerIdInvalid, RPCError, StopPropagation

# 'config' ‡§î‡§∞ 'utils' ‡§∏‡•á ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§ö‡•Ä‡§ú‡§º‡•á‡§Ç ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
from config import (
    app, group_tracking_collection, user_tracking_collection,
    logger, OWNER_ID
)
from utils import (
    delete_after_delay_for_message,
    store_message 
)

# --- ‡§¨‡•ç‡§∞‡•â‡§°‡§ï‡§æ‡§∏‡•ç‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡§Ø‡§æ ‡§î‡§∞ ‡§¨‡•á‡§π‡§§‡§∞ ‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ ---

# ‡§Ø‡§π ‡§°‡§ø‡§ï‡•ç‡§∂‡§®‡§∞‡•Ä ‡§¨‡§§‡§æ‡§è‡§ó‡•Ä ‡§ï‡§ø ‡§¨‡•â‡§ü ‡§ï‡§ø‡§∏ ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•á ‡§Æ‡•à‡§∏‡•á‡§ú ‡§ï‡§æ ‡§á‡§Ç‡§§‡§ú‡§æ‡§∞ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à
waiting_for_reply = {}

# ‡§Ø‡§π ‡§≤‡§ø‡§∏‡•ç‡§®‡§∞ ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§ì‡§®‡§∞ ‡§ï‡•á ‡§Æ‡•à‡§∏‡•á‡§ú ‡§ï‡•ã ‡§∏‡•Å‡§®‡•á‡§ó‡§æ ‡§ú‡§¨ ‡§¨‡•â‡§ü ‡§á‡§Ç‡§§‡§ú‡§æ‡§∞ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•ã
@app.on_message(filters.private & filters.user(OWNER_ID) & ~filters.command(), group=-1)
async def message_waiter_handler(client, message: Message):
    user_id = message.from_user.id
    # ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§ï‡•ç‡§Ø‡§æ ‡§¨‡•â‡§ü ‡§á‡§∏ ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•á ‡§ú‡§µ‡§æ‡§¨ ‡§ï‡§æ ‡§á‡§Ç‡§§‡§ú‡§æ‡§∞ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à
    future = waiting_for_reply.pop(user_id, None)
    if future:
        # ‡§Ö‡§ó‡§∞ ‡§π‡§æ‡§Å, ‡§§‡•ã ‡§Æ‡•à‡§∏‡•á‡§ú ‡§ï‡•ã ‡§¨‡•ç‡§∞‡•â‡§°‡§ï‡§æ‡§∏‡•ç‡§ü ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® ‡§§‡§ï ‡§™‡§π‡•Å‡§Å‡§ö‡§æ‡§è‡§Å
        future.set_result(message)
        # ‡§î‡§∞ ‡§á‡§∏ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§ï‡•ã ‡§Ü‡§ó‡•á ‡§ï‡§ø‡§∏‡•Ä ‡§î‡§∞ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® (‡§ú‡•à‡§∏‡•á AI ‡§ö‡•à‡§ü) ‡§§‡§ï ‡§ú‡§æ‡§®‡•á ‡§∏‡•á ‡§∞‡•ã‡§ï‡•á‡§Ç
        raise StopPropagation

async def ask_for_message(client, chat_id, text, timeout=600):
    """
    ‡§Ø‡§π ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•ã ‡§è‡§ï ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡§§‡§æ ‡§π‡•à ‡§î‡§∞ ‡§â‡§®‡§ï‡•á ‡§Ö‡§ó‡§≤‡•á ‡§Æ‡•à‡§∏‡•á‡§ú ‡§ï‡§æ ‡§á‡§Ç‡§§‡§ú‡§æ‡§∞ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
    """
    await client.send_message(chat_id, text)
    # ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•á ‡§Ö‡§ó‡§≤‡•á ‡§Æ‡•à‡§∏‡•á‡§ú ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§´‡•ç‡§Ø‡•Ç‡§ö‡§∞ ‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü ‡§¨‡§®‡§æ‡§è‡§Å
    future = asyncio.get_event_loop().create_future()
    waiting_for_reply[chat_id] = future
    try:
        # ‡§¶‡§ø‡§è ‡§ó‡§è ‡§ü‡§æ‡§á‡§Æ‡§Ü‡§â‡§ü ‡§§‡§ï ‡§Æ‡•à‡§∏‡•á‡§ú ‡§ï‡§æ ‡§á‡§Ç‡§§‡§ú‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç
        return await asyncio.wait_for(future, timeout=timeout)
    except asyncio.TimeoutError:
        # ‡§ü‡§æ‡§á‡§Æ‡§Ü‡§â‡§ü ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§°‡§ø‡§ï‡•ç‡§∂‡§®‡§∞‡•Ä ‡§∏‡•á ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•ã ‡§π‡§ü‡§æ ‡§¶‡•á‡§Ç
        waiting_for_reply.pop(chat_id, None)
        return None

# --- ‡§¨‡•ç‡§∞‡•â‡§°‡§ï‡§æ‡§∏‡•ç‡§ü ‡§≠‡•á‡§ú‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§≤‡•â‡§ú‡§ø‡§ï (‡§á‡§∏‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§¨‡§¶‡§≤‡§æ‡§µ ‡§®‡§π‡•Ä‡§Ç) ---
async def send_broadcast_message(client: Client, chat_id: int, message: Message):
    try:
        await message.copy(chat_id, parse_mode=ParseMode.MARKDOWN)
        return (True, "Success")
    except UserIsBlocked: return (False, "Blocked")
    except ChatWriteForbidden: return (False, "Blocked")
    except PeerIdInvalid: return (False, "Deleted/Invalid")
    except RPCError as rpc_e:
        if "USER_DEACTIVATED" in str(rpc_e): return (False, "Deleted/Deactivated")
        logger.error(f"RPC Error sending broadcast to chat {chat_id}: {rpc_e}")
        return (False, "Error")
    except FloodWait as fw:
        logger.warning(f"FloodWait of {fw.value}s encountered. Sleeping...")
        await asyncio.sleep(fw.value)
        return await send_broadcast_message(client, chat_id, message)
    except Exception as e:
        logger.error(f"General Error sending broadcast to chat {chat_id}: {e}")
        return (False, "Error")

# -----------------------------------------------------
# 1. PRIVATE CHAT BROADCAST (/broadcast) - ‡§Ü‡§™‡§ï‡§æ ‡§™‡§∏‡§Ç‡§¶‡•Ä‡§¶‡§æ ‡§§‡§∞‡•Ä‡§ï‡§æ
# -----------------------------------------------------
@app.on_message(filters.command("broadcast") & filters.private & filters.user(OWNER_ID))
async def pm_broadcast(client: Client, message: Message):
    # ‡§¨‡•ç‡§∞‡•â‡§°‡§ï‡§æ‡§∏‡•ç‡§ü ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡•à‡§∏‡•á‡§ú ‡§Æ‡§æ‡§Ç‡§ó‡•á‡§Ç
    b_msg = await ask_for_message(
        client,
        message.chat.id,
        "**üöÄ Private Broadcast:**\n‡§Ö‡§¨ ‡§Æ‡•Å‡§ù‡•á ‡§µ‡§π ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡•á‡§Ç ‡§ú‡§ø‡§∏‡•á ‡§Ü‡§™ ‡§∏‡§≠‡•Ä ‡§Ø‡•Ç‡§ú‡§∞‡•ç‡§∏ ‡§ï‡•ã ‡§≠‡•á‡§ú‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§ (‡§´‡•ã‡§ü‡•ã, ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã, ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§ï‡•Å‡§õ ‡§≠‡•Ä)"
    )

    if b_msg is None:
        await message.reply_text("‚è∞ ‡§∏‡§Æ‡§Ø ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§‡•§ ‡§¨‡•ç‡§∞‡•â‡§°‡§ï‡§æ‡§∏‡•ç‡§ü ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§")
        return

    # ‡§Ø‡•Ç‡§ú‡§∞‡•ç‡§∏ ‡§ï‡•Ä ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§®‡§ø‡§ï‡§æ‡§≤‡•á‡§Ç
    all_target_ids = [u["_id"] for u in user_tracking_collection.find({}) if u["_id"] != OWNER_ID]
    total_targets = len(all_target_ids)
    
    if total_targets == 0:
        await message.reply_text("ü§∑‚Äç‚ôÄÔ∏è ‡§¨‡•ç‡§∞‡•â‡§°‡§ï‡§æ‡§∏‡•ç‡§ü ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ã‡§à ‡§Ø‡•Ç‡§ú‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§")
        return

    sts = await message.reply_text(f"üöÄ **Private Broadcast Shuru!**\n‡§Æ‡•à‡§Ç **{total_targets}** ‡§™‡•ç‡§∞‡§æ‡§á‡§µ‡•á‡§ü ‡§Ø‡•Ç‡§ú‡§∞‡•ç‡§∏ ‡§ï‡•ã ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú ‡§∞‡§π‡•Ä ‡§π‡•Ç‡§Å...", parse_mode=ParseMode.MARKDOWN)
    
    start_time = time.time()
    done, success, blocked, deleted, failed = 0, 0, 0, 0, 0
    
    for chat_id in all_target_ids:
        pti, sh = await send_broadcast_message(client, chat_id, b_msg)
        if pti: success += 1
        else:
            if sh == "Blocked": blocked += 1
            elif "Deleted" in sh: deleted += 1
            else: failed += 1
        done += 1
        
        if done % 20 == 0 or done == total_targets:
            try:
                await sts.edit_text(
                    f"üöÄ **Broadcast Progress...**\n\n"
                    f"Total: **{total_targets}** | Completed: **{done}**\n"
                    f"‚úÖ Success: **{success}**\n"
                    f"‚ùå Blocked: **{blocked}**\n"
                    f"üóëÔ∏è Deleted: **{deleted}**"
                )
            except Exception: pass
                
    time_taken = datetime.timedelta(seconds=int(time.time()-start_time))
    await sts.edit_text(
        f"üéâ **Private Broadcast ‡§™‡•Ç‡§∞‡§æ ‡§π‡•Å‡§Ü!**\n"
        f"‡§∏‡§Æ‡§Ø ‡§≤‡§ó‡§æ: **{time_taken}**\n\n"
        f"Total Users: **{total_targets}**\n"
        f"‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§≠‡•á‡§ú‡§æ: **{success}** ‚ú®\n"
        f"Blocked: **{blocked}** üíî\n"
        f"Deleted/Invalid: **{deleted}** üóëÔ∏è"
    )
    await store_message(client, message)

# -----------------------------------------------------
# 2. GROUP BROADCAST (/grp_broadcast) - ‡§Ü‡§™‡§ï‡§æ ‡§™‡§∏‡§Ç‡§¶‡•Ä‡§¶‡§æ ‡§§‡§∞‡•Ä‡§ï‡§æ
# -----------------------------------------------------
@app.on_message(filters.command("grp_broadcast") & filters.private & filters.user(OWNER_ID))
async def broadcast_group(client: Client, message: Message):
    b_msg = await ask_for_message(
        client,
        message.chat.id,
        "**üöÄ Group Broadcast:**\n‡§Ö‡§¨ ‡§Æ‡•Å‡§ù‡•á ‡§µ‡§π ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡•á‡§Ç ‡§ú‡§ø‡§∏‡•á ‡§Ü‡§™ ‡§∏‡§≠‡•Ä ‡§ó‡•ç‡§∞‡•Å‡§™‡•ç‡§∏ ‡§Æ‡•á‡§Ç ‡§≠‡•á‡§ú‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§ (‡§´‡•ã‡§ü‡•ã, ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã, ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§ï‡•Å‡§õ ‡§≠‡•Ä)"
    )

    if b_msg is None:
        await message.reply_text("‚è∞ ‡§∏‡§Æ‡§Ø ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§‡•§ ‡§¨‡•ç‡§∞‡•â‡§°‡§ï‡§æ‡§∏‡•ç‡§ü ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§")
        return

    group_chat_ids = [g["_id"] for g in group_tracking_collection.find({})]
    total_targets = len(group_chat_ids)
    
    if total_targets == 0:
        await message.reply_text("ü§∑‚Äç‚ôÄÔ∏è ‡§¨‡•ç‡§∞‡•â‡§°‡§ï‡§æ‡§∏‡•ç‡§ü ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ã‡§à ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§")
        return

    sts = await message.reply_text(f"üöÄ **Group Broadcast Shuru!**\n‡§Æ‡•à‡§Ç **{total_targets}** ‡§ó‡•ç‡§∞‡•Å‡§™‡•ç‡§∏ ‡§Æ‡•á‡§Ç ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú ‡§∞‡§π‡•Ä ‡§π‡•Ç‡§Å...", parse_mode=ParseMode.MARKDOWN)
    
    start_time = time.time()
    done, success, failed = 0, 0, 0
    
    for chat_id in group_chat_ids:
        pti, sh = await send_broadcast_message(client, chat_id, b_msg)
        if pti: success += 1
        else: failed += 1
        done += 1
        
        if done % 20 == 0 or done == total_targets:
            try:
                await sts.edit_text(
                    f"üöÄ **Group Broadcast Progress...**\n\n"
                    f"Total Groups: **{total_targets}** | Completed: **{done}**\n"
                    f"‚úÖ Success: **{success}**\n"
                    f"‚ùå Failed: **{failed}**"
                )
            except Exception: pass
                
    time_taken = datetime.timedelta(seconds=int(time.time()-start_time))
    await sts.edit_text(
        f"üéâ **Group Broadcast ‡§™‡•Ç‡§∞‡§æ ‡§π‡•Å‡§Ü!**\n"
        f"‡§∏‡§Æ‡§Ø ‡§≤‡§ó‡§æ: **{time_taken}**\n\n"
        f"Total Groups: **{total_targets}**\n"
        f"‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§≠‡•á‡§ú‡§æ: **{success}** ‚ú®\n"
        f"Failed: **{failed}** üíî"
    )
    await store_message(client, message)
