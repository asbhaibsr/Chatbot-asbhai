from pyrogram import Client, filters
from pyrogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram.enums import ParseMode, ChatType
import asyncio

# рдЖрдкрдХреЛ рдпрд╣рд╛рдВ 'app' рдФрд░ 'logger' рдФрд░ рдЕрдиреНрдп CONFIG рд╡реЗрд░рд┐рдПрдмрд▓реНрд╕ рдХреЛ рдЗрдореНрдкреЛрд░реНрдЯ рдХрд░рдирд╛ рд╣реЛрдЧрд╛
# рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдЖрдкрдХреА 'config.py' рд╕реЗ рдпреЗ рд╕рд╣реА рдврдВрдЧ рд╕реЗ рдЗрдореНрдкреЛрд░реНрдЯ рд╣реЛ рд░рд╣реЗ рд╣реИрдВред
from config import (
    app, logger, ASBHAI_USERNAME, ASFILTER_BOT_USERNAME, OWNER_ID, UPDATE_CHANNEL_USERNAME,
    buttons_collection, group_tracking_collection, user_tracking_collection,
    messages_collection, owner_taught_responses_collection, conversational_learning_collection,
    biolink_exceptions_collection, earning_tracking_collection, reset_status_collection
)

# utils.py рд╕реЗ рдЖрд╡рд╢реНрдпрдХ рдлрд╝рдВрдХреНрд╢рди рдЗрдореНрдкреЛрд░реНрдЯ рдХрд░реЗрдВ
from utils import get_top_earning_users, send_and_auto_delete_reply, store_message, update_user_info, update_group_info

@app.on_callback_query(filters.regex("show_help_menu"))
async def show_help_menu_callback(client: Client, callback_query: CallbackQuery):
    logger.info(f"Help menu callback triggered by user {callback_query.from_user.id} in chat {callback_query.message.chat.id}")
    
    help_message = (
        "рдпрд╣ рд░рд╣реА рдЖрдкрдХреА рдорджрдж, рдбрд╛рд░реНрд▓рд┐рдВрдЧ! ЁЯе░\n\n"
        "рдореЗрд░реЗ рдХреБрдЫ рдХрдорд╛рдВрдбреНрд╕:\n"
        "тАв `/start` - рдореБрдЭреЗ рд╢реБрд░реВ рдХрд░реЛ!\n"
        "тАв `/help` - рдпрд╣ рд╣реЗрд▓реНрдк рдореЗрдиреНрдпреВ рджрд┐рдЦрд╛рдУ!\n"
        "тАв `/topusers` - рд╕рдмрд╕реЗ рдЬрд╝реНрдпрд╛рджрд╛ рдмрд╛рддреЗрдВ рдХрд░рдиреЗ рд╡рд╛рд▓реЗ рдпреВрдЬрд╝рд░реНрд╕!\n"
        "тАв `/stats check` - рдореЗрд░реА рдкрд░рдлреЙрд░реНрдореЗрдВрд╕ рджреЗрдЦреЛ!\n"
        "тАв `/chat on/off` - рдЧреНрд░реБрдк рдореЗрдВ рдореБрдЭреЗ рдЪрд╛рд▓реВ/рдмрдВрдж рдХрд░реЛ (рдПрдбрдорд┐рди рдХреЗ рд▓рд┐рдП)\n"
        "тАв `/linkdel on/off` - рд▓рд┐рдВрдХреНрд╕ рдбрд┐рд▓реАрдЯ рдХрд░рдиреЗ рдХрд╛ рдлреАрдЪрд░ рдСрди/рдСрдл рдХрд░реЛ (рдПрдбрдорд┐рди рдХреЗ рд▓рд┐рдП)\n"
        "тАв `/biolinkdel on/off` - рдмрд╛рдпреЛ-рд▓рд┐рдВрдХреНрд╕ рдбрд┐рд▓реАрдЯ рдХрд░рдиреЗ рдХрд╛ рдлреАрдЪрд░ рдСрди/рдСрдл рдХрд░реЛ (рдПрдбрдорд┐рди рдХреЗ рд▓рд┐рдП)\n"
        "тАв `/biolink <user_id>` / `/biolink remove <user_id>` - рдХрд┐рд╕реА рдпреВрдЬрд╝рд░ рдХреЛ рдмрд╛рдпреЛ-рд▓рд┐рдВрдХ рд╕реЗ рдЫреВрдЯ рджреЛ/рд╣рдЯрд╛рдУ (рдПрдбрдорд┐рди рдХреЗ рд▓рд┐рдП)\n"
        "тАв `/usernamedel on/off` - @usernames рдбрд┐рд▓реАрдЯ рдХрд░рдиреЗ рдХрд╛ рдлреАрдЪрд░ рдСрди/рдСрдл рдХрд░реЛ (рдПрдбрдорд┐рди рдХреЗ рд▓рд┐рдП)\n"
        "тАв `/clearmydata` - рдЕрдкрдирд╛ рд╕рд╛рд░рд╛ рдбреЗрдЯрд╛ рдбрд┐рд▓реАрдЯ рдХрд░реЛ (рдмреЙрд╕ рдХреЗ рд▓рд┐рдП `clearmydata <user_id>`)\n\n"
        "рдЕрдЧрд░ рдХреЛрдИ рдФрд░ рдорджрдж рдЪрд╛рд╣рд┐рдП, рддреЛ рдмрд╕ рдкреВрдЫреЛ! ЁЯШК"
    )

    keyboard = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("ЁЯТ░ Earning Rules", callback_data="show_earning_rules")],
            [InlineKeyboardButton("ЁЯФЩ рд╡рд╛рдкрд╕ рдЬрд╛рдПрдБ", callback_data="start_menu_from_help")] # 'рд╡рд╛рдкрд╕ рдЬрд╛рдПрдБ' рдмрдЯрди рдЬреЛрдбрд╝рд╛
        ]
    )

    # callback_query.message.edit_text рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ рдХреНрдпреЛрдВрдХрд┐ рдпрд╣ рдПрдХ рдореМрдЬреВрджрд╛ рдореИрд╕реЗрдЬ рдХреЛ рдПрдбрд┐рдЯ рдХрд░ рд░рд╣рд╛ рд╣реИ
    await callback_query.message.edit_text(
        text=help_message,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )
    await callback_query.answer() # рдХреЙрд▓рдмреИрдХ рдХреНрд╡реЗрд░реА рдХреЛ рд╕реНрд╡реАрдХрд╛рд░ рдХрд░реЗрдВ

@app.on_callback_query(filters.regex("show_earning_rules"))
async def show_earning_rules_callback(client: Client, callback_query: CallbackQuery):
    logger.info(f"Earning rules callback triggered by user {callback_query.from_user.id} in chat {callback_query.message.chat.id}")
    
    earning_rules_message = (
        "ЁЯТ░ **рдкреИрд╕реЗ рдХрдорд╛рдиреЗ рдХреЗ рдирд┐рдпрдо!** ЁЯТ░\n\n"
        "рдпрд╣рд╛рдВ рдмрддрд╛рдпрд╛ рдЧрдпрд╛ рд╣реИ рдХрд┐ рдЖрдк рдореЗрд░реЗ рд╕рд╛рде рдХреИрд╕реЗ рдХрдорд╛ рд╕рдХрддреЗ рд╣реИрдВ:\n"
        "1. **рд╕рдХреНрд░рд┐рдп рд░рд╣реЗрдВ:** рдЧреНрд░реБрдк рдореЗрдВ рдЬрд╝реНрдпрд╛рджрд╛ рд╕реЗ рдЬрд╝реНрдпрд╛рджрд╛ рдореИрд╕реЗрдЬ рдХрд░реЗрдВ рдФрд░ рдмрд╛рддрдЪреАрдд рдореЗрдВ рд╣рд┐рд╕реНрд╕рд╛ рд▓реЗрдВред\n"
        "2. **рдордЬреЗрджрд╛рд░ рдмрдиреЗрдВ:** рдЕрдЪреНрдЫреЗ, рдХреНрд╡рд╛рд▓рд┐рдЯреА рд╡рд╛рд▓реЗ рдФрд░ рдордЬреЗрджрд╛рд░ рдореИрд╕реЗрдЬ рдХрд░реЗрдВред рд╕реНрдкреИрдорд┐рдВрдЧ рд╕реЗ рдмрдЪреЗрдВ!\n"
        "3. **рд╣рд░ рдорд╣реАрдиреЗ рд░реАрд╕реЗрдЯ:** рд╣рд░ рдорд╣реАрдиреЗ рдХреА рдкрд╣рд▓реА рддрд╛рд░реАрдЦ рдХреЛ рд▓реАрдбрд░рдмреЛрд░реНрдб рд░реАрд╕реЗрдЯ рд╣реЛ рдЬрд╛рддрд╛ рд╣реИ, рддрд╛рдХрд┐ рд╕рдмрдХреЛ рдореМрдХрд╛ рдорд┐рд▓реЗ!\n"
        "4. **рдкреБрд░рд╕реНрдХрд╛рд░:** рдЯреЙрдк рдпреВрдЬрд╝рд░реНрд╕ рдХреЛ рд╣рд░ рдорд╣реАрдиреЗ рдирдХрдж рдкреБрд░рд╕реНрдХрд╛рд░ рдпрд╛ рдкреНрд░реАрдорд┐рдпрдо рд╕рдмреНрд╕рдХреНрд░рд┐рдкреНрд╢рди рдорд┐рд▓рддреЗ рд╣реИрдВред\n\n"
        f"рдЬрд╝реНрдпрд╛рджрд╛ рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд▓рд┐рдП рдореЗрд░реЗ рдорд╛рд▓рд┐рдХ @{ASBHAI_USERNAME} рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред\n\n"
        "рдЪрд▓реЛ, рдЕрдм рдмрд╛рддреЗрдВ рдХрд░реЛ рдФрд░ рдЬреАрддреЛ! ЁЯЪА"
    )

    keyboard = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("ЁЯФЩ Earning Leaderboard", callback_data="show_earning_leaderboard")] # Earning Leaderboard рдкрд░ рд╡рд╛рдкрд╕ рдЬрд╛рдиреЗ рдХреЗ рд▓рд┐рдП
        ]
    )

    await callback_query.message.edit_text(
        text=earning_rules_message,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )
    await callback_query.answer() # рдХреЙрд▓рдмреИрдХ рдХреНрд╡реЗрд░реА рдХреЛ рд╕реНрд╡реАрдХрд╛рд░ рдХрд░реЗрдВ

@app.on_callback_query(filters.regex("start_menu_from_help"))
async def back_to_start_from_help(client: Client, callback_query: CallbackQuery):
    logger.info(f"Back to start menu from help triggered by user {callback_query.from_user.id} in chat {callback_query.message.chat.id}")
    
    user_name = callback_query.from_user.first_name if callback_query.from_user else "Dost"
    welcome_message = (
        f"ЁЯМЯ рд╣реЗ **{user_name}** рдЬрд╛рдиреВ! рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! ЁЯМЯ\n\n"
        "рдореИрдВ рдЖрдкрдХреА рдорджрдж рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░ рд╣реВрдБ!\n"
        "рдЕрдкрдиреА рд╕рднреА рдХрдорд╛рдВрдбреНрд╕ рджреЗрдЦрдиреЗ рдХреЗ рд▓рд┐рдП рдиреАрдЪреЗ рджрд┐рдП рдЧрдП 'рд╕рд╣рд╛рдпрддрд╛' рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред"
    )
    keyboard = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("тЮХ рдореБрдЭреЗ рдЧреНрд░реБрдк рдореЗрдВ рдЬреЛрдбрд╝реЗрдВ", url=f"https://t.me/{client.me.username}?startgroup=true")],
            [
                InlineKeyboardButton("ЁЯУг Updates Channel", url=f"https://t.me/{UPDATE_CHANNEL_USERNAME}"),
                InlineKeyboardButton("тЭУ Support Group", url="https://t.me/aschat_group")
            ],
            [
                InlineKeyboardButton("тД╣я╕П рд╕рд╣рд╛рдпрддрд╛ тЭУ", callback_data="show_help_menu"),
                InlineKeyboardButton("ЁЯТ░ Earning Leaderboard", callback_data="show_earning_leaderboard")
            ]
        ]
    )
    # рдпрд╣рд╛рдВ send_and_auto_delete_reply рдХреА рдЬрдЧрд╣ edit_message_text рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
    await callback_query.message.edit_text(
        text=welcome_message,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN,
        disable_web_page_preview=True # рдЕрдЧрд░ рдЗрд╕рдореЗрдВ рдХреЛрдИ рд▓рд┐рдВрдХ рд╣реИ рддреЛ рдЙрд╕рдХрд╛ рдкреНрд░реАрд╡реНрдпреВ рдбрд┐рд╕реЗрдмрд▓ рдХрд░реЗрдВ
    )
    await callback_query.answer()

@app.on_callback_query(filters.regex("show_earning_leaderboard"))
async def show_earning_leaderboard_callback(client: Client, callback_query: CallbackQuery):
    logger.info(f"Earning leaderboard callback triggered by user {callback_query.from_user.id} in chat {callback_query.message.chat.id}")
    
    top_users = await get_top_earning_users()
    if not top_users:
        await callback_query.message.edit_text(text="ЁЯШв рдЕрдм рддрдХ рдХреЛрдИ рднреА рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рд▓реАрдбрд░рдмреЛрд░реНрдб рдкрд░ рдирд╣реАрдВ рд╣реИ! рд╕рдХреНрд░рд┐рдп рд╣реЛрдХрд░ рдкрд╣рд▓реЗ рдмрдиреЗрдВ! тЬи\n\n**Powered By:** @asbhaibsr", parse_mode=ParseMode.MARKDOWN)
        await callback_query.answer()
        return

    earning_messages = ["ЁЯСС **Top Active Users - тЬи VIP Leaderboard! тЬи** ЁЯСС\n\n"]
    prizes = {
        1: "ЁЯТ░ тВ╣50", 2: "ЁЯТ╕ тВ╣30", 3: "ЁЯОБ тВ╣20",
        4: f"ЁЯОм @{ASFILTER_BOT_USERNAME} рдХрд╛ 1 рд╣рдлрд╝реНрддреЗ рдХрд╛ рдкреНрд░реАрдорд┐рдпрдо рдкреНрд▓рд╛рди",
        5: f"ЁЯОм @{ASFILTER_BOT_USERNAME} рдХрд╛ 3 рджрд┐рди рдХрд╛ рдкреНрд░реАрдорд┐рдпрдо рдкреНрд▓рд╛рди"
    }

    for i, user in enumerate(top_users[:5]):
        rank = i + 1
        user_name = user.get('first_name', 'Unknown User')
        username_str = f"@{user.get('username')}" if user.get('username') else f"ID: `{user.get('user_id')}`"
        message_count = user.get('message_count', 0)
        prize_str = prizes.get(rank, "ЁЯПЕ рдХреЛрдИ рдкреБрд░рд╕реНрдХрд╛рд░ рдирд╣реАрдВ")

        group_info = ""
        last_group_id = user.get('last_active_group_id')
        last_group_title = user.get('last_active_group_title', 'Unknown Group')

        if last_group_id:
            try:
                chat_obj = await client.get_chat(last_group_id)
                if chat_obj.type == ChatType.PRIVATE:
                    group_info = f"   тАв рд╕рдХреНрд░рд┐рдп рдерд╛: **[рдирд┐рдЬреА рдЪреИрдЯ рдореЗрдВ](tg://user?id={user.get('user_id')})**\n"
                elif chat_obj.username:
                    group_info = f"   тАв рд╕рдХреНрд░рд┐рдп рдерд╛: **[{chat_obj.title}](https://t.me/{chat_obj.username})**\n"
                else:
                    try:
                        invite_link = await client.export_chat_invite_link(last_group_id)
                        group_info = f"   тАв рд╕рдХреНрд░рд┐рдп рдерд╛: **[{chat_obj.title}]({invite_link})**\n"
                    except Exception:
                        group_info = f"   тАв рд╕рдХреНрд░рд┐рдп рдерд╛: **{chat_obj.title}** (рдирд┐рдЬреА рдЧреНрд░реБрдк)\n"
            except Exception as e:
                logger.warning(f"Could not fetch chat info for group ID {last_group_id} for leaderboard: {e}")
                group_info = f"   тАв рд╕рдХреНрд░рд┐рдп рдерд╛: **{last_group_title}** (рдЬрд╛рдирдХрд╛рд░реА рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ)\n"
        else:
            group_info = "   тАв рд╕рдХреНрд░рд┐рдп рдерд╛: **рдХреЛрдИ рдЧреНрд░реБрдк рдЧрддрд┐рд╡рд┐рдзрд┐ рдирд╣реАрдВ**\n"

        earning_messages.append(
            f"**{rank}.** ЁЯМЯ **{user_name}** ({username_str}) ЁЯМЯ\n"
            f"   тАв рдХреБрд▓ рдореИрд╕реЗрдЬ: **{message_count} ЁЯТм**\n"
            f"   тАв рд╕рдВрднрд╛рд╡рд┐рдд рдкреБрд░рд╕реНрдХрд╛рд░: **{prize_str}**\n"
            f"{group_info}"
        )
    
    earning_messages.append(
        "\n_рд╣рд░ рдорд╣реАрдиреЗ рдХреА рдкрд╣рд▓реА рддрд╛рд░реАрдЦ рдХреЛ рдпрд╣ рд╕рд┐рд╕реНрдЯрдо рд░реАрд╕реЗрдЯ рд╣реЛрддрд╛ рд╣реИ!_\n"
        "_рдЧреНрд░реБрдк рдХреЗ рдирд┐рдпрдореЛрдВ рдХреЛ рдЬрд╛рдирдиреЗ рдХреЗ рд▓рд┐рдП `/help` рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред_"
    )
    keyboard = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("ЁЯТ░ рдкреИрд╕реЗ рдирд┐рдХрд▓рд╡рд╛рдПрдБ (Withdraw)", url=f"https://t.me/{ASBHAI_USERNAME}"),
                InlineKeyboardButton("ЁЯТ░ Earning Rules", callback_data="show_earning_rules")
            ]
        ]
    )
    await callback_query.message.edit_text(text="\n".join(earning_messages), reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN, disable_web_page_preview=True)
    await callback_query.answer()

# --- clearall_dbs рдХреЗ рд▓рд┐рдП рдХреЙрд▓рдмреИрдХ рд╣реИрдВрдбрд▓рд░ ---
@app.on_callback_query(filters.regex("confirm_clearall_dbs"))
async def confirm_clearall_dbs_callback(client: Client, callback_query: CallbackQuery):
    logger.info(f"Clear All DBs confirmation received from owner {callback_query.from_user.id}")
    if callback_query.from_user.id != OWNER_ID:
        await callback_query.answer("рдЖрдк рдЕрдзрд┐рдХреГрдд рдирд╣реАрдВ рд╣реИрдВред", show_alert=True)
        return

    try:
        messages_collection.drop()
        buttons_collection.drop()
        group_tracking_collection.drop()
        user_tracking_collection.drop()
        owner_taught_responses_collection.drop()
        conversational_learning_collection.drop()
        biolink_exceptions_collection.drop()
        earning_tracking_collection.drop()
        reset_status_collection.drop()

        await callback_query.message.edit_text(
            "ЁЯОЙ **рдмреЙрд╕! рдЖрдкрдХрд╛ рдкреВрд░рд╛ рдбреЗрдЯрд╛рдмреЗрд╕ рд╕рдлрд╝рд╛рдИ рд╕реЗ рдЪрдордХ рд░рд╣рд╛ рд╣реИ!** тЬи\n"
            "рд╕рднреА рд╕рдВрдЧреНрд░рд╣ (collections) рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╣рдЯрд╛ рджрд┐рдП рдЧрдП рд╣реИрдВред\n"
            "рдПрдХрджрдо рдирдпрд╛ рд╕реНрдЯрд╛рд░реНрдЯ! ЁЯЪА",
            parse_mode=ParseMode.MARKDOWN
        )
        logger.info(f"Owner {callback_query.from_user.id} successfully cleared all MongoDB collections.")
    except Exception as e:
        await callback_query.message.edit_text(
            f"рдбреЗрдЯрд╛рдмреЗрд╕ рд╕рд╛рдлрд╝ рдХрд░рддреЗ рд╕рдордп рдПрд░рд░: {e}. рдУрд╣ рдиреЛ! ЁЯШ▒",
            parse_mode=ParseMode.MARKDOWN
        )
        logger.error(f"Error clearing all databases: {e}")
    
    await callback_query.answer("рдбреЗрдЯрд╛рдмреЗрд╕ рд╕рд╛рдлрд╝ рдХрд┐рдпрд╛ рдЧрдпрд╛!", show_alert=True)

@app.on_callback_query(filters.regex("cancel_clearall_dbs"))
async def cancel_clearall_dbs_callback(client: Client, callback_query: CallbackQuery):
    logger.info(f"Clear All DBs cancellation received from owner {callback_query.from_user.id}")
    if callback_query.from_user.id != OWNER_ID:
        await callback_query.answer("рдЖрдк рдЕрдзрд┐рдХреГрдд рдирд╣реАрдВ рд╣реИрдВред", show_alert=True)
        return
    
    await callback_query.message.edit_text(
        "рдареАрдХ рд╣реИ! тЬЕ рдбреЗрдЯрд╛рдмреЗрд╕ рдХреА рд╕рдлрд╝рд╛рдИ рд░рджреНрдж рдХрд░ рджреА рдЧрдИ рд╣реИред\n"
        "рдЖрдкрдХрд╛ рдбреЗрдЯрд╛ рд╕реБрд░рдХреНрд╖рд┐рдд рд╣реИред ЁЯШЙ",
        parse_mode=ParseMode.MARKDOWN
    )
    await callback_query.answer("рд░рджреНрдж рдХрд┐рдпрд╛ рдЧрдпрд╛!", show_alert=True)
